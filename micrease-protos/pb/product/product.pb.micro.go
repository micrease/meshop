// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product/product.proto

package product

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProductService service

func NewProductServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "ProductService.Create",
			Path:    []string{"/v1/product/add"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ProductService.Detail",
			Path:    []string{"/v1/product/detail/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for ProductService service

type ProductService interface {
	Create(ctx context.Context, in *ProductInsertReq, opts ...client.CallOption) (*ProductResp, error)
	//{option (google.api.http) = {post: "/hello";body: "*";}
	Delete(ctx context.Context, in *ProductDeleteReq, opts ...client.CallOption) (*ProductResp, error)
	Update(ctx context.Context, in *ProductUpdateReq, opts ...client.CallOption) (*ProductResp, error)
	Detail(ctx context.Context, in *ProductDetailReq, opts ...client.CallOption) (*ProductResp, error)
	PageList(ctx context.Context, in *ProductPageReq, opts ...client.CallOption) (*ProductPageResp, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) Create(ctx context.Context, in *ProductInsertReq, opts ...client.CallOption) (*ProductResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.Create", in)
	out := new(ProductResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) Delete(ctx context.Context, in *ProductDeleteReq, opts ...client.CallOption) (*ProductResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.Delete", in)
	out := new(ProductResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) Update(ctx context.Context, in *ProductUpdateReq, opts ...client.CallOption) (*ProductResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.Update", in)
	out := new(ProductResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) Detail(ctx context.Context, in *ProductDetailReq, opts ...client.CallOption) (*ProductResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.Detail", in)
	out := new(ProductResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) PageList(ctx context.Context, in *ProductPageReq, opts ...client.CallOption) (*ProductPageResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.PageList", in)
	out := new(ProductPageResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	Create(context.Context, *ProductInsertReq, *ProductResp) error
	//{option (google.api.http) = {post: "/hello";body: "*";}
	Delete(context.Context, *ProductDeleteReq, *ProductResp) error
	Update(context.Context, *ProductUpdateReq, *ProductResp) error
	Detail(context.Context, *ProductDetailReq, *ProductResp) error
	PageList(context.Context, *ProductPageReq, *ProductPageResp) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) error {
	type productService interface {
		Create(ctx context.Context, in *ProductInsertReq, out *ProductResp) error
		Delete(ctx context.Context, in *ProductDeleteReq, out *ProductResp) error
		Update(ctx context.Context, in *ProductUpdateReq, out *ProductResp) error
		Detail(ctx context.Context, in *ProductDetailReq, out *ProductResp) error
		PageList(ctx context.Context, in *ProductPageReq, out *ProductPageResp) error
	}
	type ProductService struct {
		productService
	}
	h := &productServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ProductService.Create",
		Path:    []string{"/v1/product/add"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ProductService.Detail",
		Path:    []string{"/v1/product/detail/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ProductService{h}, opts...))
}

type productServiceHandler struct {
	ProductServiceHandler
}

func (h *productServiceHandler) Create(ctx context.Context, in *ProductInsertReq, out *ProductResp) error {
	return h.ProductServiceHandler.Create(ctx, in, out)
}

func (h *productServiceHandler) Delete(ctx context.Context, in *ProductDeleteReq, out *ProductResp) error {
	return h.ProductServiceHandler.Delete(ctx, in, out)
}

func (h *productServiceHandler) Update(ctx context.Context, in *ProductUpdateReq, out *ProductResp) error {
	return h.ProductServiceHandler.Update(ctx, in, out)
}

func (h *productServiceHandler) Detail(ctx context.Context, in *ProductDetailReq, out *ProductResp) error {
	return h.ProductServiceHandler.Detail(ctx, in, out)
}

func (h *productServiceHandler) PageList(ctx context.Context, in *ProductPageReq, out *ProductPageResp) error {
	return h.ProductServiceHandler.PageList(ctx, in, out)
}
